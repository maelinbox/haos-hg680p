name: Build HAOS for HG680P (final)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install packages
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          wget curl jq gzip xz-utils kpartx losetup qemu-utils \
          squashfs-tools binfmt-support rsync dosfstools mtools

    - name: Get latest HAOS release tag
      id: haos_tag
      run: |
        TAG=$(curl -sS https://api.github.com/repos/home-assistant/operating-system/releases/latest | jq -r .tag_name)
        echo "LATEST_TAG=${TAG}" >> "$GITHUB_ENV"
        echo "Latest HAOS tag: ${TAG}"

    - name: Download HAOS generic aarch64 (latest)
      run: |
        # remove leading v from tag if present for filename
        VERSION="${LATEST_TAG#v}"
        URL="https://github.com/home-assistant/operating-system/releases/download/${LATEST_TAG}/haos_generic-aarch64-${VERSION}.img.xz"
        echo "Downloading HAOS from: $URL"
        wget -q --show-progress "$URL" -O haos.img.xz
        ls -lh haos.img.xz
        xz -d -T0 haos.img.xz
        mv haos.img haos_${VERSION}.img
        echo "HAOS_IMG=haos_${VERSION}.img" >> "$GITHUB_ENV"

    - name: Download Armbian S905X (ophub link)
      run: |
        ARMB_URL="https://github.com/ophub/amlogic-s9xxx-armbian/releases/download/Armbian_bullseye_save_2025.08/Armbian_25.08.0_amlogic_s905x_bullseye_6.1.147_server_2025.08.01.img.gz"
        echo "Downloading Armbian from: $ARMB_URL"
        wget -q --show-progress "$ARMB_URL" -O armbian.img.gz
        gunzip -c armbian.img.gz > armbian.img
        ls -lh armbian.img

    - name: Prepare loops, map partitions, and patch HAOS
      env:
        HAOS_IMG: ${{ env.HAOS_IMG }}
      run: |
        set -euxo pipefail
        HAOS_IMG="${HAOS_IMG:-haos.img}"
        ARMB_IMG="armbian.img"

        # create temp dirs
        WORKDIR=$(mktemp -d /tmp/haos_port.XXXX)
        echo "WORKDIR=$WORKDIR"
        cd "$WORKDIR"

        # setup loop devices and kpartx (automatically create /dev/mapper/loop?pN)
        HAOS_LOOP=$(sudo losetup --show -f "$GITHUB_WORKSPACE/${HAOS_IMG}")
        ARMB_LOOP=$(sudo losetup --show -f "$GITHUB_WORKSPACE/${ARMB_IMG}")
        echo "HAOS_LOOP=$HAOS_LOOP"
        echo "ARMB_LOOP=$ARMB_LOOP"

        sudo kpartx -av "$HAOS_LOOP"
        sudo kpartx -av "$ARMB_LOOP"

        # helper to find mapper devices
        HAOS_BASE=$(basename "$HAOS_LOOP")
        ARMB_BASE=$(basename "$ARMB_LOOP")

        # find boot & root mapper devices by checking FS type
        find_boot_and_root() {
          local base="$1"
          BOOT=""
          ROOT=""
          for d in /dev/mapper/${base}p*; do
            [ -e "$d" ] || continue
            TYPE=$(sudo blkid -o value -s TYPE "$d" || true)
            if [ "$TYPE" = "vfat" ] || [ "$TYPE" = "fat32" ]; then
              BOOT="$d"
            elif [ "$TYPE" = "ext4" ] || [ "$TYPE" = "squashfs" ] || [ "$TYPE" = "ext2" ]; then
              # prefer ext4 for root, but squashfs may appear as TYPE empty; we'll still treat first non-boot as root
              if [ -z "$ROOT" ]; then
                ROOT="$d"
              fi
            fi
          done
          # fallback: first partition if detection failed
          if [ -z "$BOOT" ]; then
            BOOT=$(ls /dev/mapper/${base}p* | head -n1)
          fi
          if [ -z "$ROOT" ]; then
            ROOT=$(ls /dev/mapper/${base}p* | sed -n '2p')
          fi
          echo "$BOOT" "$ROOT"
        }

        read HAOS_BOOT_MAPPER HAOS_ROOT_MAPPER < <(find_boot_and_root "$HAOS_BASE")
        read ARMB_BOOT_MAPPER ARMB_ROOT_MAPPER < <(find_boot_and_root "$ARMB_BASE")

        echo "HAOS_BOOT_MAPPER=$HAOS_BOOT_MAPPER"
        echo "HAOS_ROOT_MAPPER=$HAOS_ROOT_MAPPER"
        echo "ARMB_BOOT_MAPPER=$ARMB_BOOT_MAPPER"
        echo "ARMB_ROOT_MAPPER=$ARMB_ROOT_MAPPER"

        # mount them
        mkdir -p mnt/haos_boot mnt/haos_root mnt/armb_boot mnt/armb_root
        sudo mount "$HAOS_BOOT_MAPPER" mnt/haos_boot
        sudo mount "$HAOS_ROOT_MAPPER" mnt/haos_root || true   # root partition might not be mountable directly (squash inside)
        sudo mount "$ARMB_BOOT_MAPPER" mnt/armb_boot
        sudo mount "$ARMB_ROOT_MAPPER" mnt/armb_root || true

        # backup original HAOS boot
        sudo mkdir -p mnt/haos_boot/backup_from_workflow
        sudo cp -a mnt/haos_boot/* mnt/haos_boot/backup_from_workflow/ || true

        # copy kernel/dtb/boot scripts from Armbian into HAOS boot (overwrite)
        echo "Copying kernel/dtb/boot:"
        sudo cp -av mnt/armb_boot/* mnt/haos_boot/ || true

        # ensure uEnv.txt contains console and does not break existing root=...
        UENV="mnt/haos_boot/uEnv.txt"
        if sudo test -f "$UENV"; then
          echo "Modifying existing uEnv.txt (preserving root=...)"
          # Add (or replace) console param but keep original bootargs root=... if present
          sudo cp -a "$UENV" "${UENV}.bak_from_action" || true
          # if there's bootargs line, append console; otherwise create bootargs with console only
          if sudo grep -q '^bootargs=' "$UENV"; then
            # append console param only if not present
            if ! sudo grep -q 'ttyAML0' "$UENV"; then
              sudo sed -i "s/^bootargs=.*/& console=ttyAML0,115200n8 console=tty0 no_console_suspend/" "$UENV"
            fi
          else
            echo 'bootargs=console=ttyAML0,115200n8 console=tty0 no_console_suspend' | sudo tee -a "$UENV"
          fi
        else
          echo "Creating uEnv.txt with minimal console settings"
          echo 'bootargs=console=ttyAML0,115200n8 console=tty0 no_console_suspend' | sudo tee "$UENV"
        fi

        # Attempt to merge firmware & kernel modules:
        # If HAOS root partition mounts and contains /lib, copy firmware/modules directly.
        if sudo test -d mnt/haos_root/lib; then
          echo "HAOS root mounted as filesystem; copying firmware/modules directly"
          sudo mkdir -p mnt/haos_root/lib/firmware
          sudo rsync -a --ignore-existing mnt/armb_root/lib/firmware/ mnt/haos_root/lib/firmware/ || true

          # try copy kernel modules if version match (best-effort)
          if [ -d mnt/armb_root/lib/modules ]; then
            sudo mkdir -p mnt/haos_root/lib/modules
            sudo rsync -a --ignore-existing mnt/armb_root/lib/modules/ mnt/haos_root/lib/modules/ || true
          fi
        else
          # If HAOS root not mountable (likely squashfs file stored under boot or root), search for .squashfs files inside mounted boot/root
          # Common HAOS layout: squashfs root stored as a file in root partition (e.g., /HAOS/.../*.squashfs)
          echo "HAOS root not mountable directly. Searching for squashfs files..."
          SQUASH_PATHS=$(sudo find mnt/haos_root -name '*.squashfs' -o -name '*.squashfs.img' 2>/dev/null || true)
          if [ -z "$SQUASH_PATHS" ]; then
            # also search entire mounted loop device (rare)
            SQUASH_PATHS=$(sudo find mnt/haos_boot -name '*.squashfs' -o -name '*.squashfs.img' 2>/dev/null || true)
          fi

          if [ -n "$SQUASH_PATHS" ]; then
            echo "Found squashfs files: "
            echo "$SQUASH_PATHS"
            # choose first one (best-effort)
            SQFILE=$(echo "$SQUASH_PATHS" | head -n1)
            echo "Working on $SQFILE"
            sudo mkdir -p work/squash-root
            sudo unsquashfs -f -d work/squash-root "$SQFILE"
            # copy firmware/modules from armbian
            if [ -d mnt/armb_root/lib/firmware ]; then
              sudo mkdir -p work/squash-root/lib/firmware
              sudo rsync -a --ignore-existing mnt/armb_root/lib/firmware/ work/squash-root/lib/firmware/
            fi
            if [ -d mnt/armb_root/lib/modules ]; then
              sudo mkdir -p work/squash-root/lib/modules
              sudo rsync -a --ignore-existing mnt/armb_root/lib/modules/ work/squash-root/lib/modules/
            fi
            # repack squashfs (overwrite original)
            sudo mksquashfs work/squash-root "$SQFILE" -comp xz -b 262144 -noappend -all-root
            sudo rm -rf work/squash-root || true
            echo "Repacked squashfs and merged firmware/modules."
          else
            echo "No squashfs found to merge. Skipping squashfs merge step."
          fi
        fi

        # sync to ensure data written
        sync

        # unmount and cleanup
        set +e
        sudo umount mnt/haos_boot || true
        sudo umount mnt/haos_root || true
        sudo umount mnt/armb_boot || true
        sudo umount mnt/armb_root || true
        sudo kpartx -d "$HAOS_LOOP" || true
        sudo kpartx -d "$ARMB_LOOP" || true
        sudo losetup -d "$HAOS_LOOP" || true
        sudo losetup -d "$ARMB_LOOP" || true

        # copy result image back to workspace for artifact upload
        cp "$GITHUB_WORKSPACE/${HAOS_IMG}" "$GITHUB_WORKSPACE/haos_hg680p_patched.img"
        echo "Patched image copied to $GITHUB_WORKSPACE/haos_hg680p_patched.img"
        rm -rf "$WORKDIR"

    - name: Compress final image
      run: |
        OUTPUT_IMG="haos_hg680p_patched.img"
        if [ -f "$OUTPUT_IMG" ]; then
          xz -T0 -9 "$OUTPUT_IMG"
          ls -lh "${OUTPUT_IMG}.xz"
        else
          echo "ERROR: patched image not found" >&2
          exit 2
        fi

    - name: Upload artifact (patched image)
      uses: actions/upload-artifact@v4
      with:
        name: haos_hg680p_patched_${{ env.LATEST_TAG }}
        path: haos_hg680p_patched.img.xz
